<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width,initial-scale=1" />
        <title>C# code reverse engineering</title>
    </head>

    <body>
        <pre>
        <code>
            
using System;
using System.Threading.Tasks;
using Diana.Core;
using Diana.Flow.Common;
using Diana.Layout;
using Microsoft.Extensions.Logging;

namespace Diana.Initialisation
{
    using IDianaLayout_v2 = Diana.Core.IDianaLayout;


    public class MatsFlow_Layout : MatsFlowLayoutFile
    {


        public MatsFlow_Layout(
                IServiceProvider serviceProvider,
                ILogger<DianaLayoutCreator> logger)
        : base(serviceProvider, logger)
        {
        }

        public override int LayoutVersion => 1; // version of the layout, every time you create a change, re version it


        public override string DisplayName => "Blank Template Creation";

        public override string Name => "Auxos/rise-x/matsflow"; 
        public override Guid CompanyId => AccessControlList.PublicCompany;
        public override DianaLayoutType TemplateType => DianaLayoutType.Form;

        public override string IconName => "ship-line.svg"; //this is the name of the image file that is shown on your card


        public override async Task<IDianaLayout_v2> CreateLayout(DianaLayoutBuilder builder)
        {
            // use new bulder

            var layout = builder
                        .Clear()
                        .AddSection("My first workflow")

                       .AddComponent(ComponentFactory.DatePicker(new ComponentOptions()
                       {
                           Title = "End Date/Time",
                           Label = "date",
                           DataPath = "$.date",
                           Width = "col-3",
                           CopyData = false,
                           AlwaysShow = true,
                           DateAllowedDaysBefore = 365
                       }))
                        .AddComponent(ComponentFactory.TextInput(new ComponentOptions()
                        {
                            Title = "My Name",
                            Label = "My Name",
                            DataPath = "$.myName",
                            DefaultValue = string.Empty,
                            Width = "col-3",
                            CopyData = true,
                            AlwaysShow = true
                        }))

                        .AddSection("Overview")
                        .AddComponent(ComponentFactory.RichText(new ComponentOptions()
                        {
                            Title = "Overview",
                            Label = "Overview",
                            DataPath = "$.report.overview",
                            Width = "col-12",
                            CopyData = false,
                            Required = false,
                            ShowInReport = true,
                            AlwaysShow = true
                        }))

                      .AddSection("Another section? what does it do")



                        .Build();

            layout.Acl.AddUser(AccessControlList.PublicCompany, AccessControlList.ReadOnly);

            return await Task.FromResult(layout);
        }

    }
}

        </code>
    </pre>
            </body>